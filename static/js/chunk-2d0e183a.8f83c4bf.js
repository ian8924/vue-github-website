(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e183a"],{"7b81":function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticStyle:{margin:"20px 10%"}},[t("v-md-preview",{attrs:{text:n.text}})],1)},p=[],a='###### tags: `vue` `vue-new`\n# keep-alive和conponent組鍵\n## keep-alive\n優點保留舊資料得完整性和減少和後端的溝通次數,缺點是有可能缺乏即時性\n``` js\n<keep-alive :include="keepPrevStep">\n        <name-component v-if="step===0"></name-component>\n        <gender-component v-if="step===1"></gender-component>\n        <area-component v-if="step===2"></area-component>\n</keep-alive>\n```\n<keep-alive>    :include 用法：\n放入的是要保留的component名稱陣列,若是要全部保留則include不設定\n``` javascript\nkeepPrevStep(){\n  return this.mapping.reduce((acc, current) => {\n              if (current.step <= this.step) {\n                acc.push(current.name);\n              }\n              return acc;\n            }, []);\n}\n\n```\n## component\n為了避免程式碼太過冗長，把compont寫在Array[ ]內有助於管理componets\n``` html\n// ：is\n  <component  :is="nowComponent" :key="nowComponent"></component>\n```\n``` javascript\n mapping: [                                 //Component data\n    { step: 0, name: "name-component" },\n    { step: 1, name: "gender-component" },\n    { step: 2, name: "area-component" }\n]\n\n                                            //Computed 回傳當前componentName\ncompute:{\n     nowComponent(){\n        return this.mapping[this.step].name\n    }\n}\n```\n## transitions與keep-alive共用\ntransitions需要包在keep-alive外面\n``` html\n<transition name="fade" mode="out-in">\n    <keep-alive>\n             <component  :is="nowComponent" :key="nowComponent"></component>\n    </keep-alive>\n</transition>\n\n```',i={data:function(){return{text:a}}},c=i,m=t("2877"),r=Object(m["a"])(c,o,p,!1,null,null,null);e["default"]=r.exports}}]);
//# sourceMappingURL=chunk-2d0e183a.8f83c4bf.js.map