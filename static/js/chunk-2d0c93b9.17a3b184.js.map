{"version":3,"sources":["webpack:///./src/views/Notes/Css/css2.vue?a970","webpack:///src/views/Notes/Css/css2.vue","webpack:///./src/views/Notes/Css/css2.vue?2a39","webpack:///./src/views/Notes/Css/css2.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticStyle","attrs","text","staticRenderFns","data","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,CAAC,OAAS,aAAa,CAACF,EAAG,eAAe,CAACG,MAAM,CAAC,KAAOP,EAAIQ,KAAK,OAAS,WAAW,IACxMC,EAAkB,GCStB,0gNAwYA,GACEC,KADF,WAEI,MAAO,CACLF,KAAN,KCrZ6a,I,YCOzaG,EAAY,eACd,EACAZ,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAE,E","file":"static/js/chunk-2d0c93b9.17a3b184.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"margin\":\"20px 10%\"}},[_c('v-md-preview',{attrs:{\"text\":_vm.text,\"height\":\"100%\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div style=\"margin:20px 10%\">\n    <v-md-preview\n      :text=\"text\"\n      height=\"100%\"\n    />\n  </div>\n</template>\n\n<script>\nconst text = `###### tags: \\`css\\`\n# Sass/SCSS 入門\nSass（Syntactically Awesome StyleSheets）是一種 CSS 的擴充，是為 CSS 的超集合（透過編譯會 compiled 成傳統 CSS，讓瀏覽器可以閱讀）。使用 Sass 的出現是為了解決在大型專案時傳統 CSS 會遇到的重複、可維護性差等問題（新增了 nested rules, variables, mixins, selector inheritance 等特性）。讓開發者可以撰寫簡潔、富語意（expressive）、重複性佳（reusable）、可維護性佳和可延展性佳的 CSS 程式碼。\n\nSass 的語法分為新的 SCSS (Sassy CSS、Sass 3，檔案名稱為 *.scss) 和舊的 SASS（向 Haml取經，具備不使用大括弧格式、使用縮排，不能直接使用 CSS 語法、學習曲線較高等特性，檔案名稱為 *.sass）。由於新的 SCSS 語法是 CSS3 的超集合，所以傳統的 CSS3 檔案就算直接複製過來也不會出錯，學習曲線相對較緩，因此我們將使用 SCSS 語法\n\n## 特性\n### 1. Variables：變數可以用來儲存值，方便重複利用\n有些時候 Variables，這時候若能使用變數儲存重複使用的值可以增加重用性。在 Sass 中我們使用 $ 來表示變數，變數的資料型態可以是 Numbers（可以有單位或無單位）、Strings、Booleans、null 值（視為空值），甚至可以使用 Lists、Maps 來。\n變數的使用：\n\\`\\`\\` scss\n$translucent-white: rgba(255,255,255,0.3);\np {\nbackground-color: $translucent-white;\n}\n\\`\\`\\`\nLists 可以空格或加逗號分隔屬性值：\n\n\\`\\`\\` scss\n$font-style-2: Helvetica, Arial, sans-serif;\n$standard-border: 4px solid black;\n\np {\nborder: $standard-border;\n}\n\\`\\`\\`\n\\`\\`\\` scss\n// maps key:value\n$font-style-2: (key1: value1, key2: value2);\n\\`\\`\\`\n\n### 2.Nesting：降低父元素重複性\n轉譯前：\n\n\\`\\`\\` scss\n.parent {\n  color: blue;\n  .child {\n    font-size: 12px;\n  }\n}\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\n.parent {\n  color: blue;\n}\n\n.parent .child {\n    font-size: 12px;\n}\n\\`\\`\\`\n在 Nesting 中不僅只有 child selectors 可以使用，還可以使用在相同的 Properties 上：\n\\`\\`\\` sass\n.parent {\n  font : {\n    family: Roboto, sans-serif;\n    size: 12px;\n    decoration: none;\n  }\n}\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\n.parent {\n  font-family: Roboto, sans-serif;\n  font-size: 12px;\n  font-decoration: none;\n}\n\n\\`\\`\\`\n### 3.Mixins：降低 pseudo 元素撰寫的重複性，如：::before、::after、:hover，在 Sass 中使用 & 代表父元素\n\n\\`\\`\\` sass\n.notecard{\n  &:hover{\n      @include transform (rotatey(-180deg));\n    }\n  }\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\n.notecard:hover {\n  transform: rotatey(-180deg);\n}\n\\`\\`\\`\n\n重用群組的 CSS，例如跨瀏覽器的 prefix，使用 @include 加入群組：\n\n\\`\\`\\` sass\n@mixin backface-visibility {\n  backface-visibility: hidden;\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  -o-backface-visibility: hidden;\n}\n.notecard {\n  .front, .back {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n\n    @include backface_visibility;\n  }\n}\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\n.notecard .front, .notecard .back {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  backface-visibility: hidden;\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  -o-backface-visibility: hidden;\n}\n\\`\\`\\`\n@mixin 也可以透過 @include 使用參數，也可以使用預設值：\n\n\\`\\`\\` sass\n@mixin backface-visibility($visibility:hidden) { //Add an argument\n  backface-visibility: $visibility;\n  -webkit-backface-visibility: $visibility;\n  -moz-backface-visibility: $visibility;\n  -ms-backface-visibility: $visibility;\n  -o-backface-visibility: $visibility;\n}\n\n.front, .back {\n    @include backface-visibility(hidden);\n}\n\n\\`\\`\\`\n有時我們也需要處理參數複雜的情形，此時可以使用 Lists、Maps 資料型態當輔助：\n\\`\\`\\` sass\n@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {\n  background: repeating-linear-gradient(\n    $direction,\n    $stripe-background,\n    $stripe-background ($width-percent - 1),\n    $stripe-color 1%,\n    $stripe-background $width-percent\n  );\n}\n\\`\\`\\`\n使用 Maps 資料格式存欲傳入變數：\n\n\\`\\`\\` sass\n$college-ruled-style: (\n    direction: to bottom,\n    width-percent: 15%,\n    stripe-color: blue,\n    stripe-background: white\n);\n\\`\\`\\`\n變數使用 ... 進行傳遞：\n\n\\`\\`\\` sass\n.definition {\n      width: 100%;\n      height: 100%;\n      @include stripes($college-ruled-style...);\n }\n\n\\`\\`\\`\n還有種情況是參數傳入當作字串（String interpolation）：\n\\`\\`\\` sass\n// 使用 #{$file} 接收\n@mixin photo-content($file) {\n  content: url(#{$file}.jpg); //string interpolation\n  object-fit: cover;\n}\n\n.photo {\n  @include photo-content('titanosaur');\n  width: 60%;\n  margin: 0px auto;\n}\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\n.photo {\n  content: url(titanosaur.jpg);\n  width: 60%;\n  margin: 0px auto;\n}\n\\`\\`\\`\n更可以搭配 Nesting 使用：\n\n\\`\\`\\` sass\n@mixin hover-color($color) {\n&:hover {\ncolor: $color;\n}\n}\n\n.word {\n@include hover-color(red);\n}\n\\`\\`\\`\n### 4.Functions\n在 Sass 內建一些好用 functions 可以簡單設定色相、漸層，例如：adjust-hue($color, $degrees)、fade-out：\n\\`\\`\\` sass\n$lagoon-blue: fade-out(#62fdca, 0.5);\n\n\\`\\`\\`\n更多內建 Functions 可以[參考這邊](https://sass-lang.com/documentation/modules)\n\n### 5.Operations：透過加減乘除和取餘數等運算子可以方便運算所需的屬性值\n\n顏色加法：\n\\`\\`\\` sass\n$color: #010203 + #040506;\n/*\n01 + 04 = 05\n02 + 05 = 07\n03 + 06 = 09\ncolor: #050709;\n*/\n\\`\\`\\`\n> // 使用上需要注意：\n\n\\`\\`\\` sass\nwidth: $variable/6; //division\nline-height: (600px)/9; //division\nmargin-left: 20-10 px/ 2; //division\nfont-size: 10px/8px; //not division\n\\`\\`\\`\n\n也可以使用 @each 語法迭代 list 內容：\n\n\\`\\`\\` sass\n$list: (orange, purple, teal);\n\n@each $item in $list {\n  .#{$item} {\n    background: $item;\n  }\n}\n\\`\\`\\`\n使用 @for 迭代，並加入條件判斷：\n\n\\`\\`\\` sass\n@for $i from 1 through $total {\n  .ray:nth-child(#{$i}) {\nbackground: adjust-hue(blue, $i * $step);\n//\nwidth: if($i % 2 == 0, 300px, 350px);\nmargin-left: if($i % 2 == 0, 0px, 50px);\n  }\n}\n\n\\`\\`\\`\n### 6. @include 引用：可以引入其他 Sass、SCSS 檔案：\n我們通常使用 Partials 去處理特定功能，方便管理和維護。以下是引用 _variables.scss 檔案範例，其中檔名前的 _ 表示引用前要先 compile：\n\\`\\`\\` sass\n@import \"variables\";\n\n\\`\\`\\`\n### 7.@extend 共用：\n\n\\`\\`\\` sass\n.lemonade {\n  border: 1px yellow;\n  background-color: #fdd;\n}\n.strawberry {\n  @extend .lemonade;\n  border-color: pink;\n}\n\\`\\`\\`\n轉譯後：\n\n\n\\`\\`\\` sass\n.lemonade, .strawberry {\n  border: 1px yellow;\n  background-color: #fdd;\n}\n\n.strawberry {\n  @extend .lemonade;\n  border-color: pink;\n}\n\\`\\`\\`\n搭配 Placeholders 使用：\n\n\\`\\`\\` sass\na%drink {\nfont-size: 2em;\nbackground-color: $lemon-yellow;\n}\n\n.lemonade {\n@extend %drink;\n//more rules\n}\n\n\\`\\`\\`\n\\`\\`\\` sass\na.lemonade {\nfont-size: 2em;\nbackground-color: $lemon-yellow;\n}\n\n.lemonade {\n//more rules\n}\n\n\\`\\`\\`\n### 8.@mixin 和 @extend 比較\n\\`\\`\\` sass\n@mixin no-variable {\n  font-size: 12px;\n  color: #FFF;\n  opacity: .9;\n}\n\n%placeholder {\n  font-size: 12px;\n  color: #FFF;\n  opacity: .9;\n}\n\nspan {\n  @extend %placeholder;\n}\n\ndiv {\n  @extend %placeholder;\n}\n\np {\n  @include no-variable;\n}\n\nh1 {\n  @include no-variable;\n}\n\n\\`\\`\\`\n轉譯後：\n\n\\`\\`\\` sass\nspan, div{\n  font-size: 12px;\n  color: #FFF;\n  opacity: .9;\n}\n\np {\n  font-size: 12px;\n  color: #FFF;\n  opacity: .9;\n  //rules specific to ps\n}\n\nh1 {\n  font-size: 12px;\n  color: #FFF;\n  opacity: .9;\n  //rules specific to ps\n}\n\n\\`\\`\\`\n### 9.Sass 資料夾結構\n\\`\\`\\` sass\nsass/\ncomponents/\n_buttons.scss\nhelpers/\n_variables.scss\n_functions.scss\n_mixins.scss\nlayout/\n_grid.scss\n_header.scss\n_footer.scss\npages/\n_home.scss\n_contact.scss\n\\`\\`\\`\n`\nexport default {\n  data () {\n    return {\n      text\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./css2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./css2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./css2.vue?vue&type=template&id=4175587e&\"\nimport script from \"./css2.vue?vue&type=script&lang=js&\"\nexport * from \"./css2.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}