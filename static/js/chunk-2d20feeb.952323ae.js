(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d20feeb"],{b678:function(n,e,a){"use strict";a.r(e);var r=function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("div",{staticStyle:{margin:"20px 10%"}},[a("v-md-preview",{attrs:{text:n.text,height:"100%"}})],1)},t=[],i=" ###### tags: `javascript`\n# array 處理方法\n``` javascript\n// 相同的陣列\nvar people = [\n  {\n    name: 'Casper',\n    like: '鍋燒意麵',\n    age: 18\n  },\n  {\n    name: 'Wang',\n    like: '炒麵',\n    age: 24\n  },\n  {\n    name: 'Bobo',\n    like: '蘿蔔泥',\n    age: 1\n  },\n  {\n    name: '滷蛋',\n    like: '蘿蔔泥',\n    age: 3\n  }\n];\n```\n\n## filter()\n會回傳一個陣列，其條件是 return 後方為 true 的物件，很適合用在搜尋符合條件的資料。\n``` javascript\nvar result = people.filter(function(item, index, array){\n  return item.age > 5;       // 取得大於五歲的\n});\n\n\nresult=[\n{\n    name: 'Casper',\n    like: '鍋燒意麵',\n    age: 18\n  },\n  {\n    name: 'Wang',\n    like: '炒麵',\n    age: 24\n  }\n];\n```\n\n## find()\nfind() 與 filter() 很像，但 find() 只會回傳一次值，且是第一次為 true 的值。\n``` javascript\nvar result = people.find(function(item, index, array){\n  return item.age > 5;           // 取得大於五歲的\n});\n\nresult={\n    name: 'Casper',\n    like: '鍋燒意麵',\n    age: 18\n  }\n// 雖然答案有兩個，但只會回傳 Casper 這一個物件\n```\n``` javascript\nvar result = people.find(function(item, index, array){\n  return item.like === '蘿蔔泥';  // 取得陣列 like === '蘿蔔泥'\n})\n\nresult= {\n    name: 'Bobo',\n    like: '蘿蔔泥',\n    age: 1\n  }\n  // 雖然答案有兩個，但只會回傳第一個 Bobo 物件\n```\n## forEach()\nforEach 是這幾個陣列函式最單純的一個，不會額外回傳值，只單純執行每個陣列內的物件或值。\n\n``` javascript\n\nvar result = people.forEach(function(item, index, array){\n  item.age = item.age + 1;         // forEach 就如同 for，不過寫法更容易\n});\n\nresult              // 全部 age + 1\n\n```\n## map()\n使用 map() 時他需要回傳一個值，他會透過函式內所回傳的值***組合成一個新陣列***。\n* 如果不回傳則是 *undefined*\n* 回傳數量等於原始陣列的長度\n``` javascript\nvar mapAgeThan5 = people.map(function(item, index, array){\n  return item.age > 5;    // 比較大於五歲的\n});\nconsole.log(mapAgeThan5); // [true, true, false, false]\n\nvar mapEat = people.map(function(item, index, array){\n  if (item.like !== '蘿蔔泥') {\n    return `${item.like} 好吃`;\n  } else {\n    return `${item.like} 不好吃`;\n  }\n});\n\nconsole.log(mapEat);\n// [\"鍋燒意麵 好吃\", \"炒麵 好吃\", \"蘿蔔泥 不好吃\", \"蘿蔔泥 不好吃\"]\n```\n## reduce()\nreduce() 和其他幾個差異就很大了，他可以與前一個回傳的值再次作運算，參數包含以下：\n\n* accumulator: 前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值\n* currentValue: 當前變數\n* currentIndex: 當前索引\n* array: 全部陣列\n\n``` javascript\nvar reducePlus = people.reduce(function(accumulator, currentValue, currentIndex, array){\n  // 分別為前一個回傳值, 目前值, 當前索引值\n  console.log(accumulator, currentValue, currentIndex);\n  return accumulator + currentValue.age;  // 與前一個值相加\n}, 0);\n\nreducePlus // 總和為46\n```\n\n## includes()\nincludes()的作用，是查找一個值在不在數組裡，若在，則返回true，反之返回false。基本用法：\n\n\n``` javascript\n['a', 'b', 'c'].includes('a')      // true\n['a', 'b', 'c'].includes('d')      // false\n```\nincludes()方法接收兩個引數：要搜尋的值和搜尋的開始索引。當第二個引數被傳入時，該方法會從索引處開始往後搜尋（預設索引值為0）。若搜尋值在陣列中存在則返回true，否則返回false。 且看下面示例：\n``` javascript\n['a', 'b', 'c', 'd'].includes('b')          // true\n['a', 'b', 'c', 'd'].includes('b' , 1)       // true\n['a', 'b', 'c', 'd'].includes('b', 2)       // false\n\n```\n## splice()\nsplice() 方法可以藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。\n``` javascript\nvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(2, 0, 'drum');\n\n// myFish 為 [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n// removed 為 [], 沒有元素被刪除\n// myFish index=2的位置插入'drum'\n\n\nvar myFish = ['angel', 'clown', 'drum', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(3, 1);\n\n// removed 為 [\"mandarin\"]\n// myFish 為 [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n```",u={data:function(){return{text:i}}},l=u,c=a("2877"),s=Object(c["a"])(l,r,t,!1,null,null,null);e["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d20feeb.952323ae.js.map